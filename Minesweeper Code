import pygame, sys, random

# Configuration 
GRID_SIZE = 10        # 10√ó10 cells
CELL_SIZE = 40        # pixels
MINES_COUNT = 15 # Number of mines
WIDTH = HEIGHT = GRID_SIZE * CELL_SIZE # Pixel dimensions
FPS = 30 # Frames per second for the game

# Colors for different cells with specified RGB values
COLORS = {
    "hidden": (189, 189, 189), # Hidden cell colors [default]
    "revealed": (222, 222, 222), # Revealed cell colors 
    "flag": (255, 0, 0), # Flagged cell colors
    "text": (50, 50, 50),    
    "grid": (100, 100, 100)
}

# Cell Class which launches up the rectangular interface and some boolean values [may be changed later!]
class Cell:
    # Def a __init__ function with three arguemnts [self, x, y] which will be used to initialize the object
    def __init__(self, x, y):
        self.rect = pygame.Rect(x, y, CELL_SIZE, CELL_SIZE) # pygame/Rect is used to launch the rectangle
        self.is_mine = False # Initializing if there is a mine, the boolean value can and will be edited later
        self.revealed = False # Setting the boolean value to if the cell is revealed
        self.flagged = False # Setting the boolean value to if the cell has been flagged by the player
        self.adjacent = 0 # Setting the adjacent cells to 0 [false]

# Game Setup [With a function that initializes the grid, columns, randomly places mines and adjacent cells]
def init_grid(): 
    grid = [[Cell(col*CELL_SIZE, row*CELL_SIZE) # Creates a 2D grid of cell objects, each cell is initialized by multiplying the column and row indices.
             for col in range(GRID_SIZE)] for row in range(GRID_SIZE)]
    # Place Mines randomly using a simple algorithm and for loop.
    mines = random.sample([c for row in grid for c in row], MINES_COUNT)
    for cell in mines: # For each mine, set the is_mine attribute to True
        cell.is_mine = True # ‚¨ÜÔ∏è
    # Count Adjacent Mines
    for row in grid: # This loop will iterate through every cell in the grid
        for c in row: # This loop will iterate through every cell in the row
            if c.is_mine: continue # Skip cells with mines [This will be only used for adjacent cells for cells without mines]
            neighbors = [(r, col) for r in range((c.rect.y//CELL_SIZE)-1, (c.rect.y//CELL_SIZE)+2)
                                    for col in range((c.rect.x//CELL_SIZE)-1, (c.rect.x//CELL_SIZE)+2)] # The algorithm for counting neighbours and adjacent cells
            c.adjacent = sum(grid[r][col].is_mine
                             for r,col in neighbors
                             if 0 <= r < GRID_SIZE and 0 <= col < GRID_SIZE)
    return grid

# The return logic [flood fill function/algorithm]
def flood_fill(grid, row, col): # [Grid: 2d list of cell objects], [Row: Row index (y coordinate)], [Col: Column index (x coordinate)]
    cell = grid[row][col] # Cell [defined]
    if cell.revealed or cell.flagged: return # Conditional statement that checks if cell is already revealed or flagged. If yes, we return from the function immediately
    cell.revealed = True # If the above statement = 0, we set the cell.revealed attribute to True
    if cell.adjacent == 0 and not cell.is_mine: # If cell.adjacent == 0 [no adjacent cells] and cell.is_mine == False [no mine], we recursively call the flood_fill function for all adjacent cells
        for dr in (-1,0,1): # We are using 2 nested loops [to iterate over adjacent cells]
            # dr and dc are vars representing column and row offsets respectively
            for dc in (-1,0,1):
                r, c = row+dr, col+dc # Calculates indices of adjacent cells 
                if 0 <= r < GRID_SIZE and 0 <= c < GRID_SIZE: # Checks if the adjacent cell is within the grid [useful for cells at the edge]
                    flood_fill(grid, r, c) # Calls the flood fill option with the parameters changed from grid, row and col to grid, r, c,

# Game over popup screen [Code template used, not much explaining to do in this portion]
def show_game_over(screen): # Argument as 'screen'
    overlay = pygame.Surface((WIDTH, HEIGHT))
    overlay.set_alpha(180)
    overlay.fill((0, 0, 0))
    screen.blit(overlay, (0, 0))

    box_width, box_height = 300, 150
    box_rect = pygame.Rect((WIDTH - box_width)//2, (HEIGHT - box_height)//2, box_width, box_height)
    pygame.draw.rect(screen, (255, 255, 255), box_rect)
    pygame.draw.rect(screen, COLORS["grid"], box_rect, 2)

    font = pygame.font.SysFont(None, 32)
    text = font.render("üí• You Lost!", True, COLORS["text"])
    text_rect = text.get_rect(center=(WIDTH//2, HEIGHT//2 - 30))
    screen.blit(text, text_rect)

    button_rect = pygame.Rect(WIDTH//2 - 40, HEIGHT//2 + 20, 80, 30)
    pygame.draw.rect(screen, COLORS["hidden"], button_rect)
    pygame.draw.rect(screen, COLORS["grid"], button_rect, 2)
    btn_text = pygame.font.SysFont(None, 24).render("OK", True, COLORS["text"])
    btn_text_rect = btn_text.get_rect(center=button_rect.center)
    screen.blit(btn_text, btn_text_rect)

    pygame.display.flip()

    waiting = True
    while waiting:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.MOUSEBUTTONDOWN:
                if button_rect.collidepoint(event.pos):
                    waiting = False

# Game main loop along with event handling
def main():
    pygame.init() # The window 
    screen = pygame.display.set_mode((WIDTH, HEIGHT)) # The setting/mode of the window
    pygame.display.set_caption("Minesweeper Clone") # The game title [similar to tk.Tk() for tkinter]
    clock = pygame.time.Clock() # The clock object
    grid = init_grid() # Initialize the grid
    game_over = False # Set game_over to False so that the game over popup does NOT show before the user stars playing. This value can and will be inversed after the user loses

    def reset(): # Defining a function that will reset the game. This will detect the user's clicks, implement color changes and will call the flood_fill command or others when necessary.
        nonlocal grid, game_over
        grid, game_over = init_grid(), False # Setting initial values of gameover and grid to false

    while True: # Starting the while loop which will be necessary for resetting etc.
        clock.tick(FPS) # Settings the FPS [which makes sure the game doesn't run too fast.]
        for e in pygame.event.get():
            if e.type == pygame.QUIT: # This will be used if the user chooses to close the window. It will quit and use the sys.exit function [we imported sys at the beginning]
                pygame.quit()
                sys.exit()
            if e.type == pygame.MOUSEBUTTONDOWN and not game_over: # This checks the mouse down events, which tracks the click of the mouse. If the game is not over and the mouse has been clicked, the following will happen -->
                x, y = e.pos # Converts it to row, colu,m index 
                row, col = y//CELL_SIZE, x//CELL_SIZE # Gets the cell position using this formula
                cell = grid[row][col]
                if e.button == 1:  # Left click
                    if cell.is_mine:
                        game_over = True # Set the game_over to true because the user clicked on a mine! 
                        show_game_over(screen)  # üí• Calls the popup function [we defined the function above]
                        reset()                 # üîÑ Calls the reset function [we defined the function above]
                    else: # The default statement [if the user did NOT click on a mine]
                        flood_fill(grid, row, col) # Calls the flood_fill function for the reveal logic
                elif e.button == 3:  # Right click 
                    cell.flagged = not cell.flagged # Toggles the cell.flagged attribute
            if e.type == pygame.KEYDOWN and e.key == pygame.K_r:
                reset()

        # Draw
        screen.fill((0,0,0)) # Clears the entire screen and prepare for drawing everything
        for r, row in enumerate(grid): # Iterates over each row in grid
            for c, cell in enumerate(row): # Iterates over each cell in the CURRENT row
                color = COLORS["revealed"] if cell.revealed else COLORS["hidden"] # If the cell is revealed, set the color to revealed, else hidden [we defined earlier at the beginning]
                pygame.draw.rect(screen, color, cell.rect) # Draws the rectangle
                pygame.draw.rect(screen, COLORS["grid"], cell.rect, 1) # Draws the grid
                if cell.flagged and not cell.revealed: # If the cell is flagged and not revealed:
                    pygame.draw.circle(screen, COLORS["flag"], cell.rect.center, CELL_SIZE//4) # Draws the flag
                if cell.revealed: # If the cell is revealed
                    if cell.is_mine: # If the cell is a mine
                        pygame.draw.circle(screen, (0,0,0), cell.rect.center, CELL_SIZE//3) # Draws the mine
                    elif cell.adjacent > 0: # If the cell has adjacent cells
                        txt = pygame.font.SysFont(None, 24).render(str(cell.adjacent), True, COLORS["text"]) # Renders the text
                        txt_rect = txt.get_rect(center=cell.rect.center) # Gets the center
                        screen.blit(txt, txt_rect) # Blits the text

        pygame.display.flip() # Updates the display

if __name__ == "__main__":
    main()
